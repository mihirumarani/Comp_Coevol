N1=dtruncnorm(geno,-1,1,mean=0,sd=0.2)
N1=N1/sum(N1)
betas3=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dtruncnorm(geno,-1,1,mean=means[i],sd=0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas3[i]=sum(newfreq*geno)
}
########################################################################
#Case 3: Gaussian distributed traits + triangular comp. kernel
########################################################################
N1=dtruncnorm(geno,-1,1,mean=0,sd=0.2)
N1=N1/sum(N1)
betas4=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dtruncnorm(geno,-1,1,mean=means[i],sd=0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(At[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas4[i]=sum(newfreq*geno)
}
res=data.frame(mean=means,beta1=betas1,beta2=betas2,
beta3=betas4,beta4=betas4)
head(res)
N1=dunif(geno,-0.2,0.2)
N1=N1/sum(N1)
N1
t
i=1
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2
geno
i=400
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
sum(newfreq*geno)
i=1
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
newfreq
N1n
N2
plot(betas1~means)
plot(betas1~means,type="l")
#Set the mean trait values for spp no. 2
means=seq(-1.15,1.15,0.005)
N1=dunif(geno,-0.2,0.2)
N1=N1/sum(N1)
betas1=vector(length=length(means))
i
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
sum(newfreq*geno)
#Assign probabilities for all phenotypes of spp 1 and assume that mean trait value
#for sp 1 is zero.
N1=dunif(geno,-0.2,0.2)
N1=N1/sum(N1)
betas1=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas1[i]=sum(newfreq*geno)
}
########################################################################
#Case 2: Uniformly distributed traits + triangular comp. kernel
########################################################################
N1=dunif(geno,-0.2,0.2)
N1=N1/sum(N1)
betas2=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dunif(geno,means[i]-0.2,means[i]+0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(At[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas2[i]=sum(newfreq*geno)
}
########################################################################
#Case 3: Gaussian distributed traits + truncated gaussian comp. kernel
########################################################################
N1=dtruncnorm(geno,-1,1,mean=0,sd=0.2)
N1=N1/sum(N1)
betas3=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dtruncnorm(geno,-1,1,mean=means[i],sd=0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(Ag[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas3[i]=sum(newfreq*geno)
}
########################################################################
#Case 3: Gaussian distributed traits + triangular comp. kernel
########################################################################
N1=dtruncnorm(geno,-1,1,mean=0,sd=0.2)
N1=N1/sum(N1)
betas4=vector(length=length(means))
for(i in 1:length(means)){
#Create a trait distribution around the mean trait value for spp. 2
N2=dtruncnorm(geno,-1,1,mean=means[i],sd=0.2)
N2=N2/sum(N2)
N1n=vapply(1:length(N1), function(x) sum(At[x,]*N2) , 1)
newfreq=N1*(1-N1n)
newfreq= newfreq/sum(newfreq)
betas4[i]=sum(newfreq*geno)
}
res=data.frame(mean=means,beta1=betas1,beta2=betas2,
beta3=betas4,beta4=betas4)
res%>%ggplot(aes(x=means,y=beta1))+
geom_line()+
ggtitle("Uniform distribution + Gaussian Kernel")+
ylim(-0.05,0.05)
betas1
res%>%ggplot(aes(x=means,y=beta1))+
geom_line()+
ggtitle("Uniform distribution + Gaussian Kernel")
p1=res%>%ggplot(aes(x=means,y=beta1))+
geom_line()+
ggtitle("Uniform distribution + Gaussian Kernel")
p2=res%>%ggplot(aes(x=means,y=beta2))+
geom_line()+
ggtitle("Uniform distribution + Triangular Kernel")
p3=res%>%ggplot(aes(x=means,y=beta3))+
geom_line()+
ggtitle("Gaussian distribution + Gaussian Kernel")
p4=res%>%ggplot(aes(x=means,y=beta4))+
geom_line()+
ggtitle("Gaussian distribution + Triangular Kernel")
###############################################################################
#OLD CODE
###############################################################################
#Error function
erfun<-function(x){
return(2 * pnorm(x * sqrt(2)) - 1)
}
(p1|p2)/(p3|p4)
abs(runif(nsp,0.2,0.3))
abs(runif(10,0.2,0.3))
?randm
nsp=5
n=10
#Traits range between -1 and 1
geno=seq(-1,1,length.out=(2*n+1))
nt=length(geno)
#Params
#kernel related
omega=1
slope=0.7
t=1.0
a1=0.25
#Demography related
y=abs(runif(nsp,0.2,0.3))
K1=1500
K2=1500
#pre-calculate coefficients of competition between pairs of phenotypes
Ag=matrix(0,nt,nt)
At=Ag
for(i1 in 1:nt){
for(i2 in 1:nt){
Ag[i1,i2]=alpha_gt(geno[i1],geno[i2],omega,t)
At[i1,i2]=alpha_tri(geno[i1],geno[i2],slope,t)
}
}
R=qgprob(n)
#Starting population
randm=runif(nsp,-0.6,0.6)
N_uni=matrix(0,nsp,nt)
N_gau=N_uni
for(i in 1:nsp){
N_uni[i,]=dunif(geno,randm[i]-0.4,randm[i]+0.4)
N_gau[i,]=dtruncnorm(geno,-1,1,randm[i],0.3)
}
N_uni=N_uni/rowSums(N_uni)
N_gau=N_gau/rowSums(N_gau)
plot(N_uni[1,]~geno)
plot(N_gau[1,]~geno)
plot(N_gau[2,]~geno)
single_sim1=function(time,r,K1,K2,a1,A,R,Ng0,Npop){
Np0=Ng0*Npop
Ngen=Ng0
Np=Np0
nsp=nrows(Ng0)
nt=ncol(Ng0)
dat=array(dims=c(time+1,nsp,nt))
dat[1,,]=Np
#Start the simulation
for(m in 2:(time+1)){
#Determine the extinct species
Np[which(rowSums(Np) < 10 ),]=0
Ngen[which(rowSums(Np)==0),]=0
if(all(rowSums(Np)==0)){
break
}else{
newgen=matrix(0,nsp,nt)
#Reproduction
for(i in which(rowSums(Ngen)!=0)){
probs=Ngen[i,]%*%t(Ngen[i,])
for(j in 1:nt){
newgen[i,j]=sum(probs*R[,,j])
}
}
newp=newgen*rowSums(Np)
#Selection
if(nrow(A)>1){
for(i1 in 1:nrow(newp)){
#Intraspecific density dependence: Logistic
rdash=r[i1]*(1-(sum(newp[i1,])/K2))
#Interspecific comp: Lotka-Volterra
for(i2 in 1:nt){
comps=a1*sum(A[i2,]%*%t(newp[-i,]))
Np[i,j]= Np[i,j]+ (newp[i,j]*rdash*(1-(comps/K1)))
}
}
Np[which(Np < 1)]=0
Ngen=Np/rowSums(Np)
Ngen[is.nan(Ngen)]=0
}
}
dat[m,,]=Np
}
return(dat)
}
View(single_sim1)
res=single_sim1(5000,K1,K2,a1,Ag,R,N_uni,1000)
nsp=5
n=10
#Traits range between -1 and 1
geno=seq(-1,1,length.out=(2*n+1))
nt=length(geno)
#Params
#kernel related
omega=1
slope=0.7
t=1.0
a1=0.25
#Demography related
r=abs(runif(nsp,0.2,0.3))
K1=1500
K2=1500
Ag=matrix(0,nt,nt)
At=Ag
for(i1 in 1:nt){
for(i2 in 1:nt){
Ag[i1,i2]=alpha_gt(geno[i1],geno[i2],omega,t)
At[i1,i2]=alpha_tri(geno[i1],geno[i2],slope,t)
}
}
R=qgprob(n)
#Starting population
randm=runif(nsp,-0.6,0.6)
N_uni=matrix(0,nsp,nt)
N_gau=N_uni
for(i in 1:nsp){
N_uni[i,]=dunif(geno,randm[i]-0.4,randm[i]+0.4)
N_gau[i,]=dtruncnorm(geno,-1,1,randm[i],0.3)
}
N_uni=N_uni/rowSums(N_uni)
N_gau=N_gau/rowSums(N_gau)
res=single_sim1(5000,r,K1,K2,a1,Ag,R,N_uni,1000)
single_sim1=function(time,r,K1,K2,a1,A,R,Ng0,Npop){
Np0=Ng0*Npop
Ngen=Ng0
Np=Np0
nsp=nrow(Ng0)
nt=ncol(Ng0)
dat=array(dims=c(time+1,nsp,nt))
dat[1,,]=Np
#Start the simulation
for(m in 2:(time+1)){
#Determine the extinct species
Np[which(rowSums(Np) < 10 ),]=0
Ngen[which(rowSums(Np)==0),]=0
if(all(rowSums(Np)==0)){
break
}else{
newgen=matrix(0,nsp,nt)
#Reproduction
for(i in which(rowSums(Ngen)!=0)){
probs=Ngen[i,]%*%t(Ngen[i,])
for(j in 1:nt){
newgen[i,j]=sum(probs*R[,,j])
}
}
newp=newgen*rowSums(Np)
#Selection
if(nrow(A)>1){
for(i1 in 1:nrow(newp)){
#Intraspecific density dependence: Logistic
rdash=r[i1]*(1-(sum(newp[i1,])/K2))
#Interspecific comp: Lotka-Volterra
for(i2 in 1:nt){
comps=a1*sum(A[i2,]%*%t(newp[-i,]))
Np[i,j]= Np[i,j]+ (newp[i,j]*rdash*(1-(comps/K1)))
}
}
Np[which(Np < 1)]=0
Ngen=Np/rowSums(Np)
Ngen[is.nan(Ngen)]=0
}
}
dat[m,,]=Np
}
return(dat)
}
res=single_sim1(5000,r,K1,K2,a1,Ag,R,N_uni,1000)
?array
dat=array(dim=c(time+1,nsp,nt))
time=100
dat=array(dim=c(time+1,nsp,nt))
u
single_sim1=function(time,r,K1,K2,a1,A,R,Ng0,Npop){
Np0=Ng0*Npop
Ngen=Ng0
Np=Np0
nsp=nrow(Ng0)
nt=ncol(Ng0)
dat=array(dim=c(time+1,nsp,nt))
dat[1,,]=Np
#Start the simulation
for(m in 2:(time+1)){
#Determine the extinct species
Np[which(rowSums(Np) < 10 ),]=0
Ngen[which(rowSums(Np)==0),]=0
if(all(rowSums(Np)==0)){
break
}else{
newgen=matrix(0,nsp,nt)
#Reproduction
for(i in which(rowSums(Ngen)!=0)){
probs=Ngen[i,]%*%t(Ngen[i,])
for(j in 1:nt){
newgen[i,j]=sum(probs*R[,,j])
}
}
newp=newgen*rowSums(Np)
#Selection
if(nrow(A)>1){
for(i1 in 1:nrow(newp)){
#Intraspecific density dependence: Logistic
rdash=r[i1]*(1-(sum(newp[i1,])/K2))
#Interspecific comp: Lotka-Volterra
for(i2 in 1:nt){
comps=a1*sum(A[i2,]%*%t(newp[-i,]))
Np[i,j]= Np[i,j]+ (newp[i,j]*rdash*(1-(comps/K1)))
}
}
Np[which(Np < 1)]=0
Ngen=Np/rowSums(Np)
Ngen[is.nan(Ngen)]=0
}
}
dat[m,,]=Np
}
return(dat)
}
res=single_sim1(5000,r,K1,K2,a1,Ag,R,N_uni,1000)
head(res)
dims(dat)
View(single_sim1)
dat=array(dim=c(10,nsp,nt))
dims(dat)
dim(dat)
?dims
}
getsum=function(dat){
pars=dim(dat)
pops=matrix(0,pars[1],pars[2])
trmeans=pops
for(i in 1:pars[2]){
for(j in 1:pars[1]){
pops[j,i]=sum(dat[j,i,])
trmeans[j,i]=sum(res[j,i,]*geno)/sum(res[j,i,])
}
}
l=list()
l[1]=pops
l[2]=trmeans
return(l)
}
dat=getsum(res)
getsum=function(dat){
pars=dim(dat)
pops=matrix(0,pars[1],pars[2])
trmeans=pops
for(i in 1:pars[2]){
for(j in 1:pars[1]){
pops[j,i]=sum(dat[j,i,])
trmeans[j,i]=sum(res[j,i,]*geno)/sum(res[j,i,])
}
}
l=list()
l=c(l,pops)
l=c(l,trmeans)
return(l)
}
dat=getsum(res)
length(dat)
dat[1]
getsum=function(dat){
pars=dim(dat)
pops=matrix(0,pars[1],pars[2])
trmeans=pops
for(i in 1:pars[2]){
for(j in 1:pars[1]){
pops[j,i]=sum(dat[j,i,])
trmeans[j,i]=sum(res[j,i,]*geno)/sum(res[j,i,])
}
}
l=list()
l=append(l,pops, after = length(list))
l=append(l,trmeans, after = length(list))
return(l)
}
dat=getsum(res)
length(dat)
getsum=function(dat){
pars=dim(dat)
pops=matrix(0,pars[1],pars[2])
trmeans=pops
for(i in 1:pars[2]){
for(j in 1:pars[1]){
pops[j,i]=sum(dat[j,i,])
trmeans[j,i]=sum(res[j,i,]*geno)/sum(res[j,i,])
}
}
l=list()
l[[1]]=pops
l[[2]]=trmeans
return(l)
}
dat=getsum(res)
length(dat)
dat[[1]]
pops=dat[[1]]%>%as_tibble()
pops=dat[[1]]
head(pops)
nsp
pops%>%as_tibble(0)
pops%>%as_tibble()
pops=dat[[1]]%>%as_tibble()
pops
trmeans=dat[[2]]%>%as_tibble()
as_character(c(1,2,3))
as.character(c(1,2,3))
seq(10)
names(pops)=as.character(seq(nsp))
pops
pops%>%
pivot_longer(1:5,names_to = "species",values_to = "N")
pops%>%
mutate(time=1:n())%>%
pivot_longer(1:5,names_to = "species",values_to = "N")
pops%>%
mutate(time=1:n())
pops%>%
mutate(time=1:n())%>%
pivot_longer(1:5,names_to = "species",values_to = "N")
pops%>%
mutate(time=1:n())%>%
pivot_longer(1:5,names_to = "species",values_to = "N")%>%
ggplot(aes(x=time,y=N,col=species))%>%
geom_line()
pops%>%
mutate(time=1:n())%>%
pivot_longer(1:5,names_to = "species",values_to = "N")%>%
ggplot(aes(x=time,y=N,col=species))+
geom_line()
pops%>%
mutate(time=1:n())%>%
pivot_longer(1:5,names_to = "species",values_to = "N")
pops
plot(pops[,1])
plot(pops[,1],type="l")
pops[4500:4520,1]
x=1:nrow(pops)
length(x)
plot(pops[,1]~x,type="l")
plot(pops$1~x,type="l")
plot(x~pops$1,type="l")
pops[,1]
plot(dat[[1]][,1]~x,type="l")
plot(dat[[2]][,1]~x,type="l")
plot(dat[[3]][,1]~x,type="l")
plot(dat[[1]][,3]~x,type="l")
plot(dat[[1]][,5]~x,type="l")
plot(dat[[1]][,5]~x)
