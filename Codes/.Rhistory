for (i in 0:(2*n)) for (j in 0:(2*n)) for (q in 0:(2*n)) {
R[1+i,1+j,1+q] <- sum(indexsum.haplR[1+i,1+(0:q)] *
indexsum.haplR[1+j,1+q-(0:q)])
}
#Pre-calculate coefficients of competition between pairs of genotypes
A<-array(dim=c(nsp,nt,nsp,nt))
for(x in 1:nsp){
for(y in 1:nt){
for(z in 1:nsp){
for(xy in 1:nt)
if(x==z){A[x,y,z,xy]<-1
#a0*alpha.gt(geno[xy],geno[y],omega,t)
} else{A[x,y,z,xy]<-a1*alpha.gt(geno[xy],geno[y],omega,t)}
}
}
}
N0<-t(replicate(nsp,sample(c(1,runif((nt-1),0.05,0.15)),nt,replace=FALSE)))
N0<-N0/rowSums(N0)
N.ini<-rep(1000,nsp)
K<-2*N.ini
r1<-0.25-(pnorm(-5.5,geno,1)+1-pnorm(5.5,geno,1))
r1
r<-outer(rep(0.1,nsp),r1)
r
freqs<-matrix(nrow=nsp)
Npop<-matrix(nrow=nsp)
#Timepoints to record
samples<-ceiling(c(seq(1,100,length.out=10),seq(500,9999,length.out=20)))
Ngen<-N0
Np<-Ngen*N.ini
Ngen
geno
#plot of initial trait distributions
plot(Np[1,]~geno,type="l")
for(i in 2:nsp){
lines(Np[i,]~geno,col=i)
}
#plot of initial trait distributions
plot(Np[1,]~geno,type="l",ylim=c(0,1000))
for(i in 2:nsp){
lines(Np[i,]~geno,col=i)
}
Np
for(m in 1:1000){
#Find the adjust the values for extinct phenotypes
ext.sp<-which(rowSums(Np)!=0)
exti.sp<-which(rowSums(Np)==0)
Ngen[ext.sp,]<-Np[ext.sp,]/rowSums(Np)[ext.sp]
Ngen[exti.sp,]<-0
Ngen[Ngen<(10^(-8))] <- 0
if(m%in%samples){
Ngen1<-Ngen
Ngen1[which(rowSums(Ngen1)==0),]<-NA
freqs<-cbind(freqs,Ngen1)
Npop<-cbind(Npop,Np)
}
#Reproduction process
Ngen <- sapply(seq(dim(R)[3]),
function(i) rowSums(tensor::tensor(Ngen,R,2,1)[,,i]*Ngen))
Np<-Ngen*rowSums(Np)
#Selection process
Np <- Np*(1+r*(1-(tensor::tensor(A, Np, c(3,4), c(1,2))/K)))
Np[Np<1]<-0
}
head(freqs)
dim(freqa)
dim(freqs)
dim(Npop)
freqs<-freqs[,-1]
#freqs<-cbind(Ng0,freqs)
Npop<-Npop[,-1]
#Plot trajectory of trait means
tps<-rep(1:length(samples),each=nt)
means<-matrix(nrow=nsp,ncol=length(samples))
pops<-matrix(nrow=nsp,ncol=length(samples))
for(i in 1:length(samples)){
samp<-freqs[,which(tps==i)]
samp2<-Npop[,which(tps==i)]
means[,i]<-apply(samp,1,function(j) sum(geno*j))
pops[,i]<-rowSums(samp2)
}
plot(means[1,]~samples,type="l",ylim=c(-5,5),ylab="Trait means",xlab="Time",cex.lab=1.5,mgp=c(1.8,0.5,0))
for(i in 2:nrow(means)){
lines(means[i,]~samples)
}
Ngen<-N0
Np<-Ngen*N.ini
#plot of initial trait distributions
plot(Np[1,]~geno,type="l",ylim=c(0,1000))
for(i in 2:nsp){
lines(Np[i,]~geno,col=i)
}
for(m in 1:10000){
#Find the adjust the values for extinct phenotypes
ext.sp<-which(rowSums(Np)!=0)
exti.sp<-which(rowSums(Np)==0)
Ngen[ext.sp,]<-Np[ext.sp,]/rowSums(Np)[ext.sp]
Ngen[exti.sp,]<-0
Ngen[Ngen<(10^(-8))] <- 0
if(m%in%samples){
Ngen1<-Ngen
Ngen1[which(rowSums(Ngen1)==0),]<-NA
freqs<-cbind(freqs,Ngen1)
Npop<-cbind(Npop,Np)
}
#Reproduction process
Ngen <- sapply(seq(dim(R)[3]),
function(i) rowSums(tensor::tensor(Ngen,R,2,1)[,,i]*Ngen))
Np<-Ngen*rowSums(Np)
#Selection process
Np <- Np*(1+r*(1-(tensor::tensor(A, Np, c(3,4), c(1,2))/K)))
Np[Np<1]<-0
}
freqs<-freqs[,-1]
#freqs<-cbind(Ng0,freqs)
Npop<-Npop[,-1]
#Plot trajectory of trait means
tps<-rep(1:length(samples),each=nt)
means<-matrix(nrow=nsp,ncol=length(samples))
pops<-matrix(nrow=nsp,ncol=length(samples))
for(i in 1:length(samples)){
samp<-freqs[,which(tps==i)]
samp2<-Npop[,which(tps==i)]
means[,i]<-apply(samp,1,function(j) sum(geno*j))
pops[,i]<-rowSums(samp2)
}
plot(means[1,]~samples,type="l",ylim=c(-5,5),ylab="Trait means",xlab="Time",cex.lab=1.5,mgp=c(1.8,0.5,0))
for(i in 2:nrow(means)){
lines(means[i,]~samples)
}
pop1<-apply(pops,2,function(j) length(which(j!=0)))
plot(pops[1,]~samples,type="l",ylim=c(0,3500))
for(i in 2:nsp){
lines(pops[i,]~samples)
}
plot(pops[,length(samples)]~means[,length(samples)],ylab="population size",xlab="Mean trait",ylim=c(0,max(K)))
points(K~means[,length(samples)],pch=3)
# Model parameters
nsp<-20   #No. of species
n<-5   # No. of loci
geno<-seq(-5,5,l=2*n+1) #Vector of genotypes
nt<-length(geno)   # No. of genotypes
omega<-2
t<-0.5
a0<-1
a1<-0.5
#SK model of inheritance: Pre-calculate the probabilities of offspring having a genotype u if parents' genotypes are v and w.
#The output is a 3-d array
haplR <- array(0, dim=rep(n+1,3))
for(i in 0:n) for(j in 0:i) for(k in 0:min(n,(i+j))){
haplR[1+i,1+j,1+k] <- sum(dhyper(max(0, i+j-n):min(i, j), i, n-i, j) *
dbinom(k-(max(0, i+j-n):min(i,j)), i+j -
2*(max(0, i+j-n):min(i, j)), prob=0.5))
}
for (k in 0:n) {
haplR[,,1+k] <- haplR[,,1+k] + t(haplR[,,1+k])
diag(haplR[,,1+k]) <- diag(haplR[,,1+k])/2
}
indexsum.haplR <- matrix(0, 2*n+1, 2*n+1)
for(k in 0:n){
for(i in 0:n) indexsum.haplR[1+i,1+k] <- haplR[1+i,1,1+k]
for(j in 0:n) indexsum.haplR[1+j+n,1+k] <- haplR[1+n,1+j,1+k]
}
R <- array(dim=rep(1+2*n, 3))
for (i in 0:(2*n)) for (j in 0:(2*n)) for (q in 0:(2*n)) {
R[1+i,1+j,1+q] <- sum(indexsum.haplR[1+i,1+(0:q)] *
indexsum.haplR[1+j,1+q-(0:q)])
}
#Pre-calculate coefficients of competition between pairs of genotypes
A<-array(dim=c(nsp,nt,nsp,nt))
for(x in 1:nsp){
for(y in 1:nt){
for(z in 1:nsp){
for(xy in 1:nt)
if(x==z){A[x,y,z,xy]<-1
#a0*alpha.gt(geno[xy],geno[y],omega,t)
} else{A[x,y,z,xy]<-a1*alpha.gt(geno[xy],geno[y],omega,t)}
}
}
}
N0<-t(replicate(nsp,sample(c(1,runif((nt-1),0.05,0.15)),nt,replace=FALSE)))
N0<-N0/rowSums(N0)
N.ini<-rep(1000,nsp)
K<-2*N.ini
r1<-0.25-(pnorm(-5.5,geno,1)+1-pnorm(5.5,geno,1))
r<-outer(rep(0.1,nsp),r1)
freqs<-matrix(nrow=nsp)
Npop<-matrix(nrow=nsp)
#Timepoints to record
samples<-ceiling(c(seq(1,100,length.out=10),seq(500,9999,length.out=20)))
Ngen<-N0
Np<-Ngen*N.ini
#plot of initial trait distributions
plot(Np[1,]~geno,type="l",ylim=c(0,1000))
for(i in 2:nsp){
lines(Np[i,]~geno,col=i)
}
for(m in 1:10000){
#Find the adjust the values for extinct phenotypes
ext.sp<-which(rowSums(Np)!=0)
exti.sp<-which(rowSums(Np)==0)
Ngen[ext.sp,]<-Np[ext.sp,]/rowSums(Np)[ext.sp]
Ngen[exti.sp,]<-0
Ngen[Ngen<(10^(-8))] <- 0
if(m%in%samples){
Ngen1<-Ngen
Ngen1[which(rowSums(Ngen1)==0),]<-NA
freqs<-cbind(freqs,Ngen1)
Npop<-cbind(Npop,Np)
}
#Reproduction process
Ngen <- sapply(seq(dim(R)[3]),
function(i) rowSums(tensor::tensor(Ngen,R,2,1)[,,i]*Ngen))
Np<-Ngen*rowSums(Np)
#Selection process
Np <- Np*(1+r*(1-(tensor::tensor(A, Np, c(3,4), c(1,2))/K)))
Np[Np<1]<-0
}
freqs<-freqs[,-1]
#freqs<-cbind(Ng0,freqs)
Npop<-Npop[,-1]
#Plot trajectory of trait means
tps<-rep(1:length(samples),each=nt)
means<-matrix(nrow=nsp,ncol=length(samples))
pops<-matrix(nrow=nsp,ncol=length(samples))
for(i in 1:length(samples)){
samp<-freqs[,which(tps==i)]
samp2<-Npop[,which(tps==i)]
means[,i]<-apply(samp,1,function(j) sum(geno*j))
pops[,i]<-rowSums(samp2)
}
plot(means[1,]~samples,type="l",ylim=c(-5,5),ylab="Trait means",xlab="Time",cex.lab=1.5,mgp=c(1.8,0.5,0))
for(i in 2:nrow(means)){
lines(means[i,]~samples)
}
pop1<-apply(pops,2,function(j) length(which(j!=0)))
plot(pops[1,]~samples,type="l",ylim=c(0,3500))
for(i in 2:nsp){
lines(pops[i,]~samples)
}
plot(pops[,length(samples)]~means[,length(samples)],ylab="population size",xlab="Mean trait",ylim=c(0,max(K)))
points(K~means[,length(samples)],pch=3)
#Functions
library(truncnorm)
library(tidyverse)
library(patchwork)
theme_set(theme_bw())
theme_update(panel.grid = element_blank(),
strip.background = element_rect(fill = 'orange'))
cbpalette <-
c(
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7",
"#C5E772",
"#4F2CAA"
)
#Functions for competitive kernels
alpha_gt=function(x,y,omega,t){
al=0
if(abs(x-y)<t){
al=exp(-((x-y)^2)/(omega^2))
}
return(al)
}
alpha_tri=function(x,y,slope,t){
al=0
if(abs(x-y)<t){
al=1-(slope*abs(x-y))
}
return(max(0,al))
}
########################################################################
#Data analysis
#Load files
path1="C:/Users/mihir/Documents/Comp_Coevol/Codes"
files=list.files(path1)[grep("compdat",list.files(path1))]
files
read.csv(files[1])%>%as_tibble()
?read.csv
gwtwd()
getwd()
i=1
dat=tibble()
dat%>%
bind_rows(
read.csv(paste0(path1,"/",files[1]))
)
dat=tibble()
for(i in 1:length(files)){
dat=dat%>%
bind_rows(
read.csv(paste0(path1,"/",files[1]))
)
}
#Functions
library(truncnorm)
library(tidyverse)
library(patchwork)
theme_set(theme_bw())
theme_update(panel.grid = element_blank(),
strip.background = element_rect(fill = 'orange'))
cbpalette <-
c(
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7",
"#C5E772",
"#4F2CAA"
)
#Functions for competitive kernels
alpha_gt=function(x,y,omega,t){
al=0
if(abs(x-y)<t){
al=exp(-((x-y)^2)/(omega^2))
}
return(al)
}
alpha_tri=function(x,y,slope,t){
al=0
if(abs(x-y)<t){
al=1-(slope*abs(x-y))
}
return(max(0,al))
}
#function to get the probability of a getting a phenotype under SK model
qgprob=function(n){
haplR <- array(0, dim=rep(n+1,3))
for(i in 0:n) for(j in 0:i) for(k in 0:min(n,(i+j))){
haplR[1+i,1+j,1+k] <- sum(dhyper(max(0, i+j-n):min(i, j), i, n-i, j) *
dbinom(k-(max(0, i+j-n):min(i,j)), i+j -
2*(max(0, i+j-n):min(i, j)), prob=0.5))
}
for (k in 0:n) {
haplR[,,1+k] <- haplR[,,1+k] + t(haplR[,,1+k])
diag(haplR[,,1+k]) <- diag(haplR[,,1+k])/2
}
indexsum.haplR <- matrix(0, 2*n+1, 2*n+1)
for(k in 0:n){
for(i in 0:n) indexsum.haplR[1+i,1+k] <- haplR[1+i,1,1+k]
for(j in 0:n) indexsum.haplR[1+j+n,1+k] <- haplR[1+n,1+j,1+k]
}
R <- array(dim=rep(1+2*n, 3))
for (i in 0:(2*n)) for (j in 0:(2*n)) for (q in 0:(2*n)) {
R[1+i,1+j,1+q] <- sum(indexsum.haplR[1+i,1+(0:q)] *
indexsum.haplR[1+j,1+q-(0:q)])
}
return(R)
}
path1="C:/Users/mihir/Documents/Comp_Coevol/Codes"
files=list.files(path1)[grep("compdat",list.files(path1))]
dat=tibble()
for(i in 1:length(files)){
dat=dat%>%
bind_rows(
read.csv(paste0(path1,"/",files[1]))
)
}
dat
dat%>%
group_by(nloci,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()
dat%>%count(nloci)
dat%>%
group_by(kernel,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()
dat%>%
group_by(kernel,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
ggplot(aes(x=time,y=means,col=kernel,fill=kernel))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd))
dat%>%
group_by(kernel,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
ggplot(aes(x=time,y=means,col=kernel,fill=kernel))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
dat%>%
group_by(a1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
ggplot(aes(x=time,y=means,col=a1s,fill=a1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
dat%>%
group_by(a1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()
dat%>%
group_by(a1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
ggplot(aes(x=time,y=means,col=a1s,fill=a1s))+
geom_line()+
geom_point()
dat%>%
group_by(a1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(a1s=as.factor(a1s))%>%
ggplot(aes(x=time,y=means,col=a1s,fill=a1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
dat%>%
group_by(traits,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(traits=as.factor(traits))%>%
ggplot(aes(x=time,y=means,col=a1s,fill=a1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
dat%>%
group_by(traits,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(traits=as.factor(traits))%>%
ggplot(aes(x=time,y=means,col=traits,fill=traits))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
dat%>%
group_by(K1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(K1s=as.factor(K1s))%>%
ggplot(aes(x=time,y=means,col=K1s,fill=K1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
?pdf
getwd()
setwd(path1)
fig1=dat%>%
group_by(kernel,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
ggplot(aes(x=time,y=means,col=kernel,fill=kernel))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
pdf("Fig1.pdf",width = 5.91, height =3.84 , pointsize = 18, useDingbats=FALSE)
fig1
dev.off()
fig2=dat%>%
group_by(a1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(a1s=as.factor(a1s))%>%
ggplot(aes(x=time,y=means,col=a1s,fill=a1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
pdf("Fig2.pdf",width = 5.91, height =3.84 , pointsize = 18, useDingbats=FALSE)
fig2
dev.off()
fig3=dat%>%
group_by(traits,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(traits=as.factor(traits))%>%
ggplot(aes(x=time,y=means,col=traits,fill=traits))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
pdf("Fig3.pdf",width = 5.91, height =3.84 , pointsize = 18, useDingbats=FALSE)
fig3
dev.off()
fig4=dat%>%
group_by(K1s,time)%>%
summarize(means=mean(mnnd),
sd=sd(mnnd))%>%
ungroup()%>%
mutate(K1s=as.factor(K1s))%>%
ggplot(aes(x=time,y=means,col=K1s,fill=K1s))+
geom_line()+
geom_point()+
geom_ribbon(aes(ymin=means-sd,ymax=means+sd),alpha=0.2)
pdf("Fig4.pdf",width = 5.91, height =3.84 , pointsize = 18, useDingbats=FALSE)
fig4
dev.off()
