require("tensor")
require(pracma)
library("igraph")
library("ggplot2")
library("reshape2")
library(truncnorm)
?tensor
# Model parameters
nsp<-20   #No. of species
n<-20   # No. of loci
geno<-seq(-5,5,l=2*n+1) #Vector of genotypes
nt<-length(geno)   # No. of genotypes
omega<-2
t<-0.5
a0<-1
a1<-0.5
#Pre-calculate coefficients of competition between pairs of genotypes
A<-array(dim=c(nsp,nt,nsp,nt))
for(x in 1:nsp){
for(y in 1:nt){
for(z in 1:nsp){
for(xy in 1:nt)
if(x==z){A[x,y,z,xy]<-1
#a0*alpha.gt(geno[xy],geno[y],omega,t)
} else{A[x,y,z,xy]<-a1*alpha.gt(geno[xy],geno[y],omega,t)}
}
}
}
erfun<-function(x){
return(2 * pnorm(x * sqrt(2)) - 1)
}
alpha.gt<-function(a,b,omega,t){
if(is.na(a)==TRUE | is.na(b)==TRUE){return(0)}
alpha<-exp(-((a-b)^2/(omega)^2))
denom<-(pi/2)*(erfun(t/omega)-erfun(-t/omega))
alpha<-alpha/denom
if(abs(a-b)>t){alpha<-0}
return(alpha)
}
alpha.tri<-function(a,b,t){
if(is.na(a)==TRUE | is.na(b)==TRUE){return(0)}
if(abs(a-b)>=t){return(alpha<-0)}
slope<-1/t
if(((a-b)>-t) & ((a-b)<=0)){alpha<-(1+(slope*(a-b)))}
if(((a-b)>0) & ((a-b)<t)){alpha<-(1-(slope*(a-b)))}
return(alpha)
}
#SK model of inheritance: Pre-calculate the probabilities of offspring having a genotype u if parents' genotypes are v and w.
#The output is a 3-d array
haplR <- array(0, dim=rep(n+1,3))
for(i in 0:n) for(j in 0:i) for(k in 0:min(n,(i+j))){
haplR[1+i,1+j,1+k] <- sum(dhyper(max(0, i+j-n):min(i, j), i, n-i, j) *
dbinom(k-(max(0, i+j-n):min(i,j)), i+j -
2*(max(0, i+j-n):min(i, j)), prob=0.5))
}
for (k in 0:n) {
haplR[,,1+k] <- haplR[,,1+k] + t(haplR[,,1+k])
diag(haplR[,,1+k]) <- diag(haplR[,,1+k])/2
}
indexsum.haplR <- matrix(0, 2*n+1, 2*n+1)
for(k in 0:n){
for(i in 0:n) indexsum.haplR[1+i,1+k] <- haplR[1+i,1,1+k]
for(j in 0:n) indexsum.haplR[1+j+n,1+k] <- haplR[1+n,1+j,1+k]
}
R <- array(dim=rep(1+2*n, 3))
for (i in 0:(2*n)) for (j in 0:(2*n)) for (q in 0:(2*n)) {
R[1+i,1+j,1+q] <- sum(indexsum.haplR[1+i,1+(0:q)] *
indexsum.haplR[1+j,1+q-(0:q)])
}
#Pre-calculate coefficients of competition between pairs of genotypes
A<-array(dim=c(nsp,nt,nsp,nt))
for(x in 1:nsp){
for(y in 1:nt){
for(z in 1:nsp){
for(xy in 1:nt)
if(x==z){A[x,y,z,xy]<-1
#a0*alpha.gt(geno[xy],geno[y],omega,t)
} else{A[x,y,z,xy]<-a1*alpha.gt(geno[xy],geno[y],omega,t)}
}
}
}
N0<-t(replicate(nsp,sample(c(1,runif((nt-1),0.05,0.15)),nt,replace=FALSE)))
N0<-N0/rowSums(N0)
N.ini<-rep(1000,nsp)
K<-2*N.ini
r1<-0.25-(pnorm(-5.5,geno,1)+1-pnorm(5.5,geno,1))
r<-outer(rep(0.1,nsp),r1)
r
A
# Model parameters
nsp<-2   #No. of species
n<-2   # No. of loci
geno<-seq(-5,5,l=2*n+1) #Vector of genotypes
nt<-length(geno)   # No. of genotypes
omega<-2
t<-0.5
a0<-1
a1<-0.5
#SK model of inheritance: Pre-calculate the probabilities of offspring having a genotype u if parents' genotypes are v and w.
#The output is a 3-d array
haplR <- array(0, dim=rep(n+1,3))
for(i in 0:n) for(j in 0:i) for(k in 0:min(n,(i+j))){
haplR[1+i,1+j,1+k] <- sum(dhyper(max(0, i+j-n):min(i, j), i, n-i, j) *
dbinom(k-(max(0, i+j-n):min(i,j)), i+j -
2*(max(0, i+j-n):min(i, j)), prob=0.5))
}
for (k in 0:n) {
haplR[,,1+k] <- haplR[,,1+k] + t(haplR[,,1+k])
diag(haplR[,,1+k]) <- diag(haplR[,,1+k])/2
}
indexsum.haplR <- matrix(0, 2*n+1, 2*n+1)
for(k in 0:n){
for(i in 0:n) indexsum.haplR[1+i,1+k] <- haplR[1+i,1,1+k]
for(j in 0:n) indexsum.haplR[1+j+n,1+k] <- haplR[1+n,1+j,1+k]
}
R <- array(dim=rep(1+2*n, 3))
for (i in 0:(2*n)) for (j in 0:(2*n)) for (q in 0:(2*n)) {
R[1+i,1+j,1+q] <- sum(indexsum.haplR[1+i,1+(0:q)] *
indexsum.haplR[1+j,1+q-(0:q)])
}
#Pre-calculate coefficients of competition between pairs of genotypes
A<-array(dim=c(nsp,nt,nsp,nt))
for(x in 1:nsp){
for(y in 1:nt){
for(z in 1:nsp){
for(xy in 1:nt)
if(x==z){A[x,y,z,xy]<-1
#a0*alpha.gt(geno[xy],geno[y],omega,t)
} else{A[x,y,z,xy]<-a1*alpha.gt(geno[xy],geno[y],omega,t)}
}
}
}
A
dim(A)
A[1,,1,]
A[1,,2,]
A[2,,2,]
A[2,,1,]
tensor(A, Np, c(3,4), c(1,2))
Np
Ngen<-N0
Np<-Ngen*N.ini
Np
N0<-t(replicate(nsp,sample(c(1,runif((nt-1),0.05,0.15)),nt,replace=FALSE)))
N0<-N0/rowSums(N0)
N.ini<-rep(1000,nsp)
K<-2*N.ini
r1<-0.25-(pnorm(-5.5,geno,1)+1-pnorm(5.5,geno,1))
r<-outer(rep(0.1,nsp),r1)
freqs<-matrix(nrow=nsp)
Npop<-matrix(nrow=nsp)
Ngen<-N0
Np<-Ngen*N.ini
Np
rowSums(Np)
tensor(A, Np, c(3,4), c(1,2))
a
a=matrix(c(1,2,3,4),2,2)
a
b=matrix(c(5,6,7,8),2,2)
b
a%*%b
tensor(a,b,1,2)
tensor(a,b,2,1)
Np
np=matrix(rep(1,10),2,5)
np
tensor(A,np,c(3,4),c(1,2))
np
tensor(a,b,2,2)
A
A[1,1,,,]
A[1,1,,]
